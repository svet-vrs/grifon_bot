from tabnanny import check
import config
import random
import os
from googleapiclient.discovery import build
from google.oauth2 import service_account
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove
from states import Estate
from states import Admin
from a1range import A1Range
import keyboards as kb
from data_base import sqlite_db
bot = Bot(config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

appart_info = ""
request_id = 1
number_of_rooms = 0
money = 0
area = ""
phone_number = ""
ID = None
disc = ""
greeting = '–Ø - <b>—Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Grifon</b>, –ú—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —É—Å–ª—É–≥–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!'
order_name = ""
order_phone_num = ""
bid_text = ""

# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π

SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, 'credentials.json')
credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)
SAMPLE_SPREADSHEET_ID = config.TABLE_ID
SAMPLE_RANGE_NAME = '–õ–∏—Å—Ç1'
service = build(
    'sheets', 'v4', credentials=credentials).spreadsheets().values()
result = service.get(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                     range=SAMPLE_RANGE_NAME).execute()
data_from_sheet = result.get('values', [])
batch_clear_values_request_body = {
    'ranges': ["–õ–∏—Å—Ç1!A2:H1000"],
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö


async def on_startup(_):
    print("–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω")
    sqlite_db.sql_start()

# –û—á–∏—Å—Ç–∫–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º


async def clear_gs():
    clear_response = service.batchClear(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                                        body=batch_clear_values_request_body).execute()

# ////–ê–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å////


def check_sub_channel(chat_member):
    print(chat_member['status'])
    if chat_member['status'] != 'left':
        return True
    else:
        return False


@dp.message_handler(commands=['admin'])
async def make_changes_command(message: types.Message):
    if message.chat.type == 'private':
        if check_sub_channel(await bot.get_chat_member(chat_id=config.CHAT_ID, user_id=message.from_user.id)):
            global ID
            ID = message.from_user.id
            admin_name = message.from_user.first_name
            await bot.send_message(message.from_user.id, text="–£–≤–∞–∂–∞–µ–º—ã–π <b>"+str(admin_name)+"</b>, –≤—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", parse_mode='HTML', reply_markup=kb.admin_main_markup)
        else:
            await bot.send_message(message.from_user.id, '–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb.menu_markup)


@dp.callback_query_handler(text_contains="admin")
async def admin_buttons(call: types.CallbackQuery, state=FSMContext):
    if call.data == "admin_delete":
        await Admin.delete_id.set()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:', reply_markup=kb.admin_sub_markup)
    elif call.data == 'admin_exit':
        await state.finish()
        await bot.answer_callback_query(call.id, text="–í—ã –≤—ã—à–ª–∏ —Å –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=greeting, parse_mode='html', reply_markup=kb.menu_markup)

# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏


@dp.callback_query_handler(text="adminsub_cancel", state="*")
async def cancel_handler(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb.admin_main_markup)


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø–µ


@dp.callback_query_handler(text="bid_connect")
async def connect_button(call: types.CallbackQuery):
    bid_msg_id = call.message.message_id
    await sqlite_db.sql_view1_call_command(bid_msg_id)
    await sqlite_db.sql_change_call_command(bid_msg_id, call.from_user.id)
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=config.CHAT_ID, message_id=call.message.message_id, text="üîî –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ \nüîπ –§–ò–û: `"+str(sqlite_db.call_name)+"`\nüî∏ –ù–æ–º–µ—Ä: `"+str(sqlite_db.call_phone)+"`\nüîπ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \nüî∏ –ó–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª(–∞): `"+str(call.from_user.first_name)+"`", parse_mode='Markdown')
    await bot.send_message(call.from_user.id, "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∑–≤–æ–Ω–æ–∫: \nüîπ –§–ò–û: `"+str(sqlite_db.call_name)+"`\nüî∏ –ù–æ–º–µ—Ä: `"+str(sqlite_db.call_phone)+"`\nüîπ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", parse_mode='Markdown', reply_markup=kb.admin_bid_markup)
    sqlite_db.call_name = ""
    sqlite_db.call_phone = ""


@dp.callback_query_handler(text_contains="bidmenu")
async def bid_menu_button(call: types.CallbackQuery):
    if call.data == "bidmenu_finish":
        await bot.answer_callback_query(call.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞—è–≤–∫—É!", show_alert=True)
        await sqlite_db.sql_view2_call_command(call.from_user.id)
        await bot.edit_message_text(chat_id=config.CHAT_ID, message_id=sqlite_db.call_message, text="‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ \nüîπ –§–ò–û: `"+str(sqlite_db.call_name)+"`\nüî∏ –ù–æ–º–µ—Ä: `"+str(sqlite_db.call_phone)+"`\nüîπ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \nüî∏ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: `"+str(call.from_user.first_name)+"`", parse_mode='Markdown')
        await sqlite_db.sql_delete_call_command(call.from_user.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb.admin_main_markup)
        sqlite_db.call_name = ""
        sqlite_db.call_phone = ""
        sqlite_db.call_message = ""
    # if call.data == "bidmenu_reject":

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏


@dp.message_handler(state=Admin.delete_id)
async def delete_request(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        if message.from_user.id == ID:
            async with state.proxy() as data:
                data['delete_id'] = message.text
            await sqlite_db.sql_delete_command(data['delete_id'], message, state)
            await sqlite_db.sql_parse_command()
            await clear_gs()
            if sqlite_db.del_check == True:
                if sqlite_db.parse != []:
                    array = {'values': sqlite_db.parse}
                    range_ = A1Range.create_a1range_from_list(
                        '–õ–∏—Å—Ç1', 2, 1, array['values']).format()
                    response = service.update(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                                              range=range_,
                                              valueInputOption='RAW', body=array).execute()
                    await bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑—è–≤–∫—É —Å ID: " + data['delete_id'], reply_markup=kb.admin_main_markup)
                    await state.finish()
                else:
                    await bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑—è–≤–∫—É —Å ID: " + data['delete_id'], reply_markup=kb.admin_main_markup)
                    await state.finish()
            else:
                if sqlite_db.parse != []:
                    array = {'values': sqlite_db.parse}
                    range_ = A1Range.create_a1range_from_list(
                        '–õ–∏—Å—Ç1', 2, 1, array['values']).format()
                    response = service.update(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                                              range=range_,
                                              valueInputOption='RAW', body=array).execute()
                else:
                    return


# ////–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å////

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

@dp.message_handler(commands=['start', 'help'], state=None)
async def welcome(message: types.Message):
    if message.chat.type == 'private':
        await bot.send_sticker(message.from_user.id, r'CAACAgIAAxkBAAEEKuxiMHggQNoJKse-Kg4aQkbmTCXEmgACthUAAkwaiUmFljrdCwZhOCME')
        await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + message.from_user.first_name + " üëã\n–Ø - <b>—Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Grifon</b>, –ú—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —É—Å–ª—É–≥–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!",
                               parse_mode='html', reply_markup=kb.menu_markup)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏—è


@dp.callback_query_handler(text_contains="menu")
async def menu_buttons(call: types.CallbackQuery, state=FSMContext):
    if call.data == "menu_about":
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ê–≥–µ–Ω—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ì—Ä–∏—Ñ–æ–Ω —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞—Å—Ç—É—â–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –±–∞–∑–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –±–æ–ª–µ–µ 400 –¥–æ–º–æ–≤, –∏ –±–æ–ª–µ–µ 1000 –∫–≤–∞—Ä—Ç–∏—Ä –û–¥–µ—Å—Å—ã, –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞', reply_markup=kb.about_markup)
    elif call.data == 'menu_estate':
        await bot.answer_callback_query(call.id)
        await Estate.estates.set()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=kb.estate_markup)
    if call.data == 'menu_managers':
        await bot.answer_callback_query(call.id)
        await Admin.order_phone_num.set()
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, '–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.', reply_markup=kb.contact_markup)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç


@dp.message_handler(content_types=['contact'], state=Admin.order_phone_num)
async def create_call_order(message: types.Message, state=FSMContext):
    if message.chat.type == 'private':
        async with state.proxy() as data:
            data['id'] = random.randint(1000, 9999)
        async with state.proxy() as data:
            data['name'] = message.from_user.first_name
        async with state.proxy() as data:
            data['phone_num'] = message.contact.phone_number
        async with state.proxy() as data:
            data['manager'] = ""
        await bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=kb.clear_markup)
        await bot.delete_message(message.from_user.id, message.message_id + 1)
        await bot.send_message(message.from_user.id, "–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ –∑–≤–æ–Ω–æ–∫,–≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è ‚úÖ", reply_markup=kb.menu_markup)
        msg = await bot.send_message(chat_id=config.CHAT_ID, text="üîî –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ \nüîπ –§–ò–û: `"+str(data['name'])+"`\nüî∏ –ù–æ–º–µ—Ä: `"+(data['phone_num'])+"`\nüîπ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ", parse_mode='Markdown', reply_markup=kb.admin_chat_markup)
        async with state.proxy() as data:
            data['message_id'] = msg.message_id
        await sqlite_db.sql_add_call_command(state)
        await state.finish()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥


@dp.message_handler(state=Admin.order_phone_num)
async def check_call_request(message: types.Message, state=FSMContext):
    if message.chat.type == 'private':
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.finish()
            await bot.send_message(message.from_user.id, greeting, parse_mode='html', reply_markup=kb.menu_markup)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –û –Ω–∞—Å: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥


@dp.callback_query_handler(text="about_back")
async def check_call_request(call: types.CallbackQuery, state=FSMContext):
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=greeting, parse_mode='html', reply_markup=kb.menu_markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ü–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å–µ: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏

@dp.callback_query_handler(state=Estate.estates, text_contains="estate")
async def estate_buttons(call: types.CallbackQuery, state=FSMContext):
    if call.data == "estate_buy":
        async with state.proxy() as data:
            data['user_id'] = random.randint(1000, 9999)
        async with state.proxy() as data:
            data['name'] = call.from_user.first_name
        async with state.proxy() as data:
            data['estates'] = "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=kb.rooms_markup)
    elif call.data == "estate_sell":
        async with state.proxy() as data:
            data['user_id'] = random.randint(1000, 9999)
        async with state.proxy() as data:
            data['name'] = call.from_user.first_name
        async with state.proxy() as data:
            data['estates'] = "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏?', reply_markup=kb.rooms_markup)
    if call.data == "estate_rent":
        async with state.proxy() as data:
            data['user_id'] = random.randint(1000, 9999)
        async with state.proxy() as data:
            data['name'] = call.from_user.first_name
        async with state.proxy() as data:
            data['estates'] = "–°–Ω—è—Ç—å –∂–∏–ª—å–µ"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=kb.rooms_markup)
    elif call.data == "estate_rent_out":
        async with state.proxy() as data:
            data['user_id'] = random.randint(1000, 9999)
        async with state.proxy() as data:
            data['name'] = call.from_user.first_name
        async with state.proxy() as data:
            data['estates'] = "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏?', reply_markup=kb.rooms_markup)
    if call.data == 'estate_back':
        await state.finish()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=greeting, parse_mode='html', reply_markup=kb.menu_markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ü–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å–µ - –ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(state=Estate.rooms, text_contains="room")
async def estate_buttons(call: types.CallbackQuery, state=FSMContext):
    if call.data == "room_1":
        async with state.proxy() as data:
            data['rooms'] = "1"
        await Estate.next()
        if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ USDüí≤ –≤—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?', reply_markup=kb.buy_markup)
        elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤ USDüí≤ –≤—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?', reply_markup=kb.rent_markup)
    elif call.data == "room_2":
        async with state.proxy() as data:
            data['rooms'] = "2"
        await Estate.next()
        if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ USDüí≤ –≤—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?', reply_markup=kb.buy_markup)
        elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤ USDüí≤ –≤—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?', reply_markup=kb.rent_markup)
    elif call.data == "room_3":
        async with state.proxy() as data:
            data['rooms'] = "3"
        await Estate.next()
        if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ USDüí≤ –≤—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?', reply_markup=kb.buy_markup)
        elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤ USDüí≤ –≤—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?', reply_markup=kb.rent_markup)
    elif call.data == "room_4more":
        async with state.proxy() as data:
            data['rooms'] = "4+"
        await Estate.next()
        if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ USDüí≤ –≤—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?', reply_markup=kb.buy_markup)
        elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤ USDüí≤ –≤—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?', reply_markup=kb.rent_markup)
    if call.data == 'room_back':
        await state.reset_state(with_data=False)
        await Estate.estates.set()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=kb.estate_markup)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ü–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å–µ - –ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç - –¶–µ–Ω–∞: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏(–ø–æ–∫—É–ø–∫–∞)


@dp.callback_query_handler(state=Estate.money, text_contains="pricebuy")
async def second_question_buy(call: types.CallbackQuery, state=FSMContext):
    if call.data == 'pricebuy_one':
        async with state.proxy() as data:
            data['money'] = '25000-45000'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=kb.area_markup)
    elif call.data == 'pricebuy_two':
        async with state.proxy() as data:
            data['money'] = '45000-65000'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=kb.area_markup)
    elif call.data == 'pricebuy_three':
        async with state.proxy() as data:
            data['money'] = '65000-90000'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=kb.area_markup)
    elif call.data == 'pricebuy_four':
        async with state.proxy() as data:
            data['money'] = '90000-130000'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=kb.area_markup)
    elif call.data == 'pricebuy_five':
        async with state.proxy() as data:
            data['money'] = '130000-250000'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=kb.area_markup)
    elif call.data == 'pricebuy_back':
        await state.reset_state(with_data=False)
        await Estate.rooms.set()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=kb.rooms_markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ü–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å–µ - –ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç - –¶–µ–Ω–∞: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏(–∞—Ä–µ–Ω–¥–∞)
@dp.callback_query_handler(state=Estate.money, text_contains="pricerent")
async def second_question_rent(call: types.CallbackQuery, state=FSMContext):
    if call.data == 'pricerent_one':
        async with state.proxy() as data:
            data['money'] = '350-500'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤–∞—à–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?', reply_markup=kb.area_markup)
    elif call.data == 'pricerent_two':
        async with state.proxy() as data:
            data['money'] = '500-700'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤–∞—à–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?', reply_markup=kb.area_markup)
    elif call.data == 'pricerent_three':
        async with state.proxy() as data:
            data['money'] = '700-1000'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤–∞—à–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?', reply_markup=kb.area_markup)
    elif call.data == 'pricerent_four':
        async with state.proxy() as data:
            data['money'] = '1000-1500'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤–∞—à–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?', reply_markup=kb.area_markup)
    elif call.data == 'pricerent_five':
        async with state.proxy() as data:
            data['money'] = '–í—ã—à–µ 1500'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤–∞—à–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?', reply_markup=kb.area_markup)
    elif call.data == 'pricerent_back':
        await state.reset_state(with_data=False)
        await Estate.rooms.set()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏?', reply_markup=kb.rooms_markup)


# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query_handler(state=Estate.area, text_contains="area")
async def third_question(call: types.CallbackQuery, state=FSMContext):
    if call.data == 'area_one':
        async with state.proxy() as data:
            data['area'] = "C—É–≤–æ—Ä–æ–≤—Å–∫–∏–π"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=kb.contact_markup)
    elif call.data == 'area_two':
        async with state.proxy() as data:
            data['area'] = "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=kb.contact_markup)
    elif call.data == 'area_three':
        async with state.proxy() as data:
            data['area'] = "–ö–∏–µ–≤—Å–∫–∏–π"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=kb.contact_markup)
    if call.data == 'area_four':
        async with state.proxy() as data:
            data['area'] = "–ú–∞–ª–∏–Ω–æ–≤—Å–∫–∏–π"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=kb.contact_markup)
    if call.data == 'area_back':
        await state.reset_state(with_data=False)
        await Estate.money.set()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ USDüí≤ –≤—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?', reply_markup=kb.buy_markup)


# –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞


@dp.message_handler(state=Estate.phone_num)
async def check_call_request(message: types.Message, state=FSMContext):
    if message.chat.type == 'private':
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.finish()
            await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.menu_markup)

# —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞—è–≤–∫–∏


@dp.message_handler(content_types=['contact'], state=Estate.phone_num)
async def fourth_question(message: types.Message, state=FSMContext):
    if message.chat.type == 'private':
        async with state.proxy() as data:
            data['phone_num'] = message.contact.phone_number
        await Estate.next()
        await bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=kb.clear_markup)
        await bot.delete_message(message.from_user.id, message.message_id + 1)
        await bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: \n\nüè† –û–ø–µ—Ä–∞—Ü–∏—è: "+str(data['estates'])+"\nüåê –†–∞–π–æ–Ω: "+str(data['area'])+" \nüî¢ –ö–æ–º–Ω–∞—Ç—ã: "+str(data['rooms'])+"\nüíµ –¶–µ–Ω–∞ (–¥–æ–ª.): "+str(data['money'])+"\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "+str(data['phone_num'])+"\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=kb.finish_markup)


@dp.callback_query_handler(state=Estate.finish, text_contains="finish")
async def final_question(call: types.CallbackQuery, state=FSMContext):
    if call.data == "finish_yes":
        await sqlite_db.sql_add_command(state)
        await sqlite_db.sql_parse_command()
        await clear_gs()
        array = {'values': sqlite_db.parse}
        range_ = A1Range.create_a1range_from_list(
            '–õ–∏—Å—Ç1', 2, 1, array['values']).format()
        response = service.update(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                                  range=range_,
                                  valueInputOption='RAW',
                                  body=array).execute()
        await state.finish()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –≤—Å–∫–æ—Ä–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ ‚úÖ", reply_markup=kb.menu_markup)
    elif call.data == "finish_no":
        await state.reset_state(with_data=False)
        await Estate.estates.set()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É", reply_markup=kb.estate_markup)


# ***********************************–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞***********************************

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
