import config
import os
from googleapiclient.discovery import build
from google.oauth2 import service_account
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove
from states import Estate
from states import Admin
from a1range import A1Range
import keyboards as kb
from data_base import sqlite_db
bot = Bot(config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

appart_info = ""
request_id = 1
number_of_rooms = 0
money = 0
area = ""
phone_number = ""
ID = None
disc = ""

# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π

SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, 'credentials.json')
credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)
SAMPLE_SPREADSHEET_ID = ''
SAMPLE_RANGE_NAME = '–õ–∏—Å—Ç1'
service = build(
    'sheets', 'v4', credentials=credentials).spreadsheets().values()
result = service.get(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                     range=SAMPLE_RANGE_NAME).execute()
data_from_sheet = result.get('values', [])
batch_clear_values_request_body = {
    'ranges': ["–õ–∏—Å—Ç1!A2:H1000"],
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö


async def on_startup(_):
    print("–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω")
    sqlite_db.sql_start()

# –û—á–∏—Å—Ç–∫–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º


async def clear_gs():
    clear_response = service.batchClear(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                                        body=batch_clear_values_request_body).execute()

# ////–ê–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å////


@dp.message_handler(commands=['moderator'], is_chat_admin=True)
async def make_changes_command(message: types.Message):
    global ID
    ID = message.from_user.id
    admin_name = message.from_user.first_name
    await bot.send_message(chat_id="-713436137", text="–£–≤–∞–∂–∞–µ–º—ã–π <b>"+str(admin_name)+"</b>, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞", parse_mode='HTML')
    await bot.send_message(message.from_user.id, '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb.admin_markup)


@dp.message_handler(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ ID", state=None)
async def enter_req_id(message: types.Message):
    if message.from_user.id == ID:
        await Admin.delete_id.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=kb.admin_cancel_markup)

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–∞–¥


@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è", state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        current_state = await state.get_state()
        if current_state is None:
            return
        await message.reply('–í—ã –≤—ã—à–ª–∏ —Å –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞,–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —á–∞—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', reply_markup=ReplyKeyboardRemove())
        await state.finish()


@dp.message_handler(state=Admin.delete_id)
async def delete_request(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['delete_id'] = message.text
        await sqlite_db.sql_delete_command(data['delete_id'], message, state)
        await sqlite_db.sql_parse_command()
        await clear_gs()
        if sqlite_db.del_check == True:
            if sqlite_db.parse != []:
                array = {'values': sqlite_db.parse}
                range_ = A1Range.create_a1range_from_list(
                    '–õ–∏—Å—Ç1', 2, 1, array['values']).format()
                response = service.update(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                                          range=range_,
                                          valueInputOption='RAW', body=array).execute()
                await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑—è–≤–∫—É —Å ID: " + data['delete_id'], reply_markup=kb.admin_markup)
                await state.finish()
            else:
                await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑—è–≤–∫—É —Å ID: " + data['delete_id'], reply_markup=kb.admin_markup)
                await state.finish()
        else:
            if sqlite_db.parse != []:
                array = {'values': sqlite_db.parse}
                range_ = A1Range.create_a1range_from_list(
                    '–õ–∏—Å—Ç1', 2, 1, array['values']).format()
                response = service.update(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                                          range=range_,
                                          valueInputOption='RAW', body=array).execute()
            else:
                return


# ////–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å////

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é

@dp.message_handler(commands=['start', 'help'], state=None)
async def welcome(message: types.Message):
    await bot.send_sticker(message.from_user.id, r'CAACAgIAAxkBAAEDWy9hnqt1ch_H4nLtqTSEW6gF4pmgzQACkxcAAspJ0Eh8w0UdKNUtnSIE')
    await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + message.from_user.first_name + " üëã\n–Ø - <b>—Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Phoenix</b>, –ú—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —É—Å–ª—É–≥–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!",
                           parse_mode='html', reply_markup=kb.menu_markup)

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é


@dp.message_handler(content_types=['text'])
async def menu_buttons(message: types.Message, state=FSMContext):
    global disc
    if message.text == "–£–∑–Ω–∞—Ç—å –æ –Ω–∞—Å‚ùî" or message.text == "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—èüéÑ" or message.text == "–ú–µ–Ω–µ–¥–∂–µ—Ä—ãüì±" or message.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å–µüè°":
        if message.text == "–£–∑–Ω–∞—Ç—å –æ –Ω–∞—Å‚ùî":
            await message.answer("–ê–≥–µ–Ω—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –§–µ–Ω–∏–∫—Å —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞—Å—Ç—É—â–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –±–∞–∑–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –±–æ–ª–µ–µ 400 –¥–æ–º–æ–≤, –∏ –±–æ–ª–µ–µ 1000 –∫–≤–∞—Ä—Ç–∏—Ä –û–¥–µ—Å—Å—ã, –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞", reply_markup=kb.site_markup,)
        elif message.text == "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—èüéÑ":
            disc = "–°–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞"
            await Estate.estates.set()
            await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø–ª–∞–Ω–∞—Ö –Ω–∞ 2022 –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:", reply_markup=kb.app_markup)
        if message.text == "–ú–µ–Ω–µ–¥–∂–µ—Ä—ãüì±":
            await Admin.order_phone_num.set()
            await message.answer("–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä", reply_markup=kb.contact_markup)
        elif message.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å–µüè°":
            disc = ""
            await Estate.estates.set()
            await message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb.app_markup)
    else:
        await message.reply("–í—ã –¥–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é!", reply_markup=kb.menu_markup)

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º


@dp.message_handler(state=Admin.order_phone_num)
async def check_call_request(message: types.Message, state=FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.menu_markup)


@dp.message_handler(content_types=['contact'], state=Admin.order_phone_num)
async def create_call_order(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['order_name'] = message.from_user.first_name
    async with state.proxy() as data:
        data['order_phone_num'] = message.contact.phone_number
    phone = data['order_phone_num']
    if phone.startswith("+"):
        order_num = str(phone)
    else:
        order_num = "+"+str(phone)
    await message.answer("–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ –∑–≤–æ–Ω–æ–∫,–≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è‚úÖ", reply_markup=kb.menu_markup)
    await bot.send_message(chat_id="-713436137", text="–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ \n–§–ò–û: "+str(data['order_name'])+"\n–ù–æ–º–µ—Ä: "+order_num, parse_mode='Markdown')
    await state.finish()


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é


@dp.message_handler(state=Estate.estates)
async def estate_buttons(message: types.Message, state: FSMContext):
    global disc
    if message.text == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or message.text == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or message.text == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or message.text == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ" or message.text == "–ù–∞–∑–∞–¥":
        async with state.proxy() as data:
            data['plan'] = disc
        disc = ""
        if message.text == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            async with state.proxy() as data:
                data['user_id'] = message.from_user.id
            async with state.proxy() as data:
                data['name'] = message.from_user.first_name
            async with state.proxy() as data:
                data['estates'] = message.text
            await Estate.next()
            await message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb.rooms_markup)
        elif message.text == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            async with state.proxy() as data:
                data['user_id'] = message.from_user.id
            async with state.proxy() as data:
                data['name'] = message.from_user.first_name
            async with state.proxy() as data:
                data['estates'] = message.text
            await Estate.next()
            await message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏?", reply_markup=kb.rooms_markup)
        if message.text == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ":
            async with state.proxy() as data:
                data['user_id'] = message.from_user.id
            async with state.proxy() as data:
                data['name'] = message.from_user.first_name
            async with state.proxy() as data:
                data['estates'] = message.text
            await Estate.next()
            await message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb.rooms_markup)
        elif message.text == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
            async with state.proxy() as data:
                data['user_id'] = message.from_user.id
            async with state.proxy() as data:
                data['name'] = message.from_user.first_name
            async with state.proxy() as data:
                data['estates'] = message.text
            await Estate.next()
            await message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏?", reply_markup=kb.rooms_markup)
        if message.text == "–ù–∞–∑–∞–¥":
            await state.finish()
            await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.menu_markup)
    else:
        await message.reply("–í—ã –¥–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!", reply_markup=kb.app_markup)

# –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–∫—É–ø–∫–∏/–∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è


@dp.message_handler(state=Estate.rooms)
async def first_question(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['rooms'] = message.text
    if message.text != "–ù–∞–∑–∞–¥":
        if data['rooms'] == "1" or data['rooms'] == "2" or data['rooms'] == "3" or data['rooms'] == "4+":
            await Estate.next()
            if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
                await message.reply("–ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ USDüí≤ –≤—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?", reply_markup=kb.buy_markup)
            elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
                await message.reply("–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤ USDüí≤ –≤—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?", reply_markup=kb.rent_markup)
        else:
            await message.reply("–í—ã –¥–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!", reply_markup=kb.rooms_markup)
    else:
        await state.finish()
        await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.menu_markup)

# –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–∫—É–ø–∫–∏/–∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è


@dp.message_handler(state=Estate.money)
async def second_question(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['money'] = message.text
    if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
        if data['money'] == "25000-45000" or data['money'] == "45000-65000" or data['money'] == "65000-90000" or data['money'] == "90000-130000" or data['money'] == "130000-250000":
            await Estate.next()
            if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ":
                await message.reply("–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb.area_markup)
            elif data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
                await message.reply("–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤–∞—à–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?", reply_markup=kb.area_markup)
        else:
            await message.reply("–í—ã –¥–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!", reply_markup=kb.buy_markup)
    elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
        if data['money'] == "300-500" or data['money'] == "500-700" or data['money'] == "700-1000" or data['money'] == "1000-1500" or data['money'] == "–í—ã—à–µ 1500":
            await Estate.next()
            if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ":
                await message.reply("–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb.area_markup)
            elif data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
                await message.reply("–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤–∞—à–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?", reply_markup=kb.area_markup)
        else:
            await message.reply("–í—ã –¥–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!", reply_markup=kb.rent_markup)


# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞


@dp.message_handler(state=Estate.area)
async def third_question(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['area'] = message.text
    if data['area'] == "–°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π" or data['area'] == "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π" or data['area'] == "–ö–∏–µ–≤—Å–∫–∏–π" or data['area'] == "–ú–∞–ª–∏–Ω–æ–≤—Å–∫–∏–π":
        await Estate.next()
        await bot.send_message(message.from_user.id, "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", reply_markup=kb.contact_markup)
    else:
        await message.reply("–í—ã –¥–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!", reply_markup=kb.area_markup)

# –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞


@dp.message_handler(state=Estate.phone_num)
async def check_call_request(message: types.Message, state=FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.menu_markup)


@dp.message_handler(content_types=['contact'], state=Estate.phone_num)
async def fourth_question(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['phone_num'] = message.contact.phone_number
    async with state.proxy() as data:
        if 'plan' not in data.keys():
            data['plan'] = ""
    await sqlite_db.sql_add_command(state)
    await sqlite_db.sql_parse_command()
    await clear_gs()
    array = {'values': sqlite_db.parse}
    range_ = A1Range.create_a1range_from_list(
        '–õ–∏—Å—Ç1', 2, 1, array['values']).format()
    response = service.update(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                              range=range_,
                              valueInputOption='RAW',
                              body=array).execute()
    if data['plan'] != "":
        await state.finish()
        await bot.send_message(message.from_user.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ 20% –Ω–∞ —É—Å–ª—É–≥–∏ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!üéÅ", reply_markup=kb.menu_markup)
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –≤—Å–∫–æ—Ä–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ ‚úÖ", reply_markup=kb.menu_markup)


# ***********************************–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞***********************************

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
